openapi: 3.0.3
info:
  title: Todo API
  description: A simple todo application API
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: Local development server
  - url: https://api.todoapp.example.com/api/v1
    description: Production server

paths:
  /todos:
    get:
      summary: List all todos
      description: Retrieve a list of all todos
      tags:
        - todos
      parameters:
        - name: completed
          in: query
          description: Filter by completion status
          required: false
          schema:
            type: boolean
        - name: limit
          in: query
          description: Maximum number of todos to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of todos to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        "200":
          description: List of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  todos:
                    type: array
                    items:
                      $ref: "#/components/schemas/Todo"
                  total:
                    type: integer
                    description: Total number of todos
                  limit:
                    type: integer
                  offset:
                    type: integer

    post:
      summary: Create a new todo
      description: Create a new todo item
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTodoRequest"
      responses:
        "201":
          description: Todo created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /todos/{id}:
    get:
      summary: Get a todo by ID
      description: Retrieve a specific todo by its ID
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Todo found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Update a todo
      description: Update an existing todo
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateTodoRequest"
      responses:
        "200":
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    delete:
      summary: Delete a todo
      description: Delete a todo by its ID
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Todo deleted successfully
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /todos/{id}/complete:
    patch:
      summary: Toggle todo completion
      description: Mark a todo as complete or incomplete
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          description: Todo ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: boolean
                  description: Completion status
              required:
                - completed
      responses:
        "200":
          description: Todo completion status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Todo"
        "400":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Todo not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /health:
    get:
      summary: Health check
      description: Check if the API is running
      tags:
        - health
      responses:
        "200":
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time

components:
  schemas:
    Todo:
      type: object
      required:
        - id
        - title
        - completed
        - created_at
        - updated_at
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the todo
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          description: Todo title
          example: "Buy groceries"
          minLength: 1
          maxLength: 255
        description:
          type: string
          description: Detailed description of the todo
          example: "Get milk, bread, and eggs from the store"
          maxLength: 1000
        completed:
          type: boolean
          description: Whether the todo is completed
          example: false
        created_at:
          type: string
          format: date-time
          description: When the todo was created
          example: "2023-01-01T12:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: When the todo was last updated
          example: "2023-01-01T12:00:00Z"

    CreateTodoRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Todo title
          example: "Buy groceries"
          minLength: 1
          maxLength: 255
        description:
          type: string
          description: Detailed description of the todo
          example: "Get milk, bread, and eggs from the store"
          maxLength: 1000

    UpdateTodoRequest:
      type: object
      properties:
        title:
          type: string
          description: Todo title
          example: "Buy groceries"
          minLength: 1
          maxLength: 255
        description:
          type: string
          description: Detailed description of the todo
          example: "Get milk, bread, and eggs from the store"
          maxLength: 1000
        completed:
          type: boolean
          description: Whether the todo is completed
          example: false

    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Error message
          example: "Todo not found"
        code:
          type: string
          description: Error code
          example: "NOT_FOUND"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []

tags:
  - name: todos
    description: Todo management operations
  - name: health
    description: Health check operations



